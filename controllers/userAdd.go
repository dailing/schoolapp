package controllers

import (
	"encoding/json"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/orm"
	_ "github.com/go-sql-driver/mysql"
)

type UserAddController struct {
	beego.Controller
}

type SQLuserinfo struct {
	Uid      int    `orm:"pk;auto"`
	Username string `orm:"unique;column(username)"`
	Password string `orm:"column(password)"`
	Nickname string `orm:"column(nickname)"`
	Coins    int    `orm:"column(coins)"`
}

/*
	This function add a user to mysql and
	return the ID generated by mysql.
*/
func init() {
	orm.RegisterDriver("mysql", orm.DRMySQL)
	orm.RegisterDataBase("default", "mysql", "aixinwu:aixinwu@tcp(localhost:3306)/appdev?charset=utf8")
	orm.RegisterModel(new(SQLuserinfo))
	createTable()
}

func createTable() {
	name := "default"
	force := false
	verbose := true
	err := orm.RunSyncdb(name, force, verbose)
	if err != nil {
		beego.Error(err)
	}
}

func (c *UserAddController) Post() {
	beego.Debug("add user")
	info := TypeUserInfo{}
	body := c.Ctx.Input.CopyBody(beego.AppConfig.DefaultInt64("bodybuffer", 1024*1024))
	beego.Info("Post Body is:", string(body))
	err := json.Unmarshal(body, &info)
	ErrReport(err)
	if err != nil {
		c.Abort("500")
		return
	}
	retVal := TypeRegularResp{
		MataData: GenMataData(),
	}
	// check username and psw
	_, err = AddUser(info)
	retVal.Status = GenStatus(StatusCodeOK)
	c.Data["json"] = retVal
	c.ServeJSON()

}
